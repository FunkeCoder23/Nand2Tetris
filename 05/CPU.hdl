// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                         // ixxaccccccdddjjj
                         // [15] i: 0-A instr, 1-C instr
                         // [12] a: for C instr, chooses A register or M input
                         // [6..11] c's: ALU op
                         // [3..5] d: dest registers
                         // [5] A Register
                         // [4] D Register
                         // [3] M Register
                         // [0..2] j: jmp conditions


        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Choose A or C type instr
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);
    // A Register
    Not(in=instruction[15], out=Ainstr); // A type
    Or(a=Ainstr, b=instruction[5], out=Asel); // If A type or dest is A, load into A
    ARegister(in=Ain, load=Asel, out=Aout, out[0..14]=addressM);
    // ALU input
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUin);
    // D Register
    And(a=instruction[15], b=instruction[4], out=Dsel); // D dest & C type
    DRegister(in=ALUout, load=Dsel, out=Dout);
    // ALU
    ALU(x=Dout, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);
    // PC
    And(a=jump, b=instruction[15], out=jsel); //C type
    Not(in=jsel, out=inc);
    PC(in=Aout, load=jsel, inc=inc, reset=reset, out[0..14]=pc);
    // WriteM if dest is M, and not A type
    And(a=instruction[15], b=instruction[3], out=writeM);


    Not(in=neg, out=pos);
    Not(in=zero, out=nz);
    Not(in=instruction[2], out=n2);
    Not(in=instruction[1], out=n1);
    Not(in=instruction[0], out=n0);
    // NO JUMP
    // And5(a=true,b=true,c=n2,d=n1,e=n0,out=NJ);
    // JGT !ng !zr  001
    And(a=pos, b=nz, out=GT);
    And4(a=GT,b=n2,c=n1,d=instruction[0],out=JGT);
    // JEQ      zr  010
    And4(a=zero,b=n2,c=instruction[1],d=n0,out=JEQ);
    // JGE !ng      011
    Or(a=pos, b=zero, out=GE);
    And4(a=GE,b=n2,c=instruction[1],d=instruction[0],out=JGE);
    // JLT  ng !zr  100
    And(a=neg, b=nz, out=LT);
    And4(a=LT,b=instruction[2],c=n1,d=n0,out=JLT);
    // JNE     !zr  101
    And4(a=nz,b=instruction[2],c=n1,d=instruction[0],out=JNE);
    // JLE  ng      110
    Or(a=neg, b=zero, out=LE);
    And4(a=LE,b=instruction[2],c=instruction[1],d=n0,out=JLE);
    // JMP          111
    And4(a=true,b=instruction[2],c=instruction[1],d=instruction[0],out=JMP);
    // jump if any of the above
    Or8Way(in[0]=JGT, in[1]=JGE, in[2]=JLT, in[3]=JLE, in[4]=JEQ, in[5]=JNE, in[6]=JMP, in[7]=false, out=jump);
    // Xor(a=jump, b=NJ, out=JUMP);
}