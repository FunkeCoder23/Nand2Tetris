// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // 8x16 Registers
    Register(in=in, load=A, out=a);
    Register(in=in, load=B, out=b);
    Register(in=in, load=C, out=c);
    Register(in=in, load=D, out=d);
    Register(in=in, load=E, out=e);
    Register(in=in, load=F, out=f);
    Register(in=in, load=G, out=g);
    Register(in=in, load=H, out=h);

    // Invert address bits
    Not(in=address[2], out=na2);
    Not(in=address[1], out=na1);
    Not(in=address[0], out=na0);

    // Selector
    And4(a=na2,        b=na1,        c=na0,        d=load, out=A);
    And4(a=na2,        b=na1,        c=address[0], d=load, out=B);
    And4(a=na2,        b=address[1], c=na0,        d=load, out=C);
    And4(a=na2,        b=address[1], c=address[0], d=load, out=D);
    And4(a=address[2], b=na1,        c=na0,        d=load, out=E);
    And4(a=address[2], b=na1,        c=address[0], d=load, out=F);
    And4(a=address[2], b=address[1], c=na0,        d=load, out=G);
    And4(a=address[2], b=address[1], c=address[0], d=load, out=H);

    // Mux output
    Mux8Way16(a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h, sel=address, out=out);
}